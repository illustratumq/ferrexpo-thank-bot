from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message

from app.config import Config
from app.database.googlesheet.sheets_api import GoogleSheet
from app.database.services.repos import UserRepo
from app.keyboards.inline.authorization import auth_kb
from app.keyboards.reply.menu import main_menu_kb
from app.keyboards.reply.send import *
from app.states.states import SendSG


def is_number(msg: Message):
    return str(msg.text).isnumeric()


async def send_points(msg: Message, state: FSMContext, user_db: UserRepo):
    user = await user_db.get_user(msg.from_user.id)
    if user.gift_points == 0:
        await msg.answer('–¢–∏ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ 100/100 wellcoin-—ñ–≤ üíö –∑–∞ —Ü–µ–π –º—ñ—Å—è—Ü—å. –î–æ—á–µ–∫–∞–π—Å—è –Ω–∞—Å—Ç–ø—É–Ω–æ–≥–æ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è!',
                         reply_markup=main_menu_kb)
        return
    text = (
        '–ö—Ä—É—Ç–æ! –°—å–æ–≥–æ–¥–Ω—ñ —Ç–∏ –∑—Ä–æ–±–∏—à –∫–æ–≥–æ—Å—å —â–∞—Å–ª–∏–≤–∏–º!\n–î—è–∫—É—î–º–æ —Ç–æ–±—ñ üíö\n\n'
        '–©–æ–± –ø–æ—á–∞—Ç–∏, –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>"–°–ø–∏—Å–æ–∫ –∫–æ–ª–µ–≥"</b>'
    )
    await msg.answer(text, reply_markup=send_kb)
    await state.update_data(gefter_id=msg.from_user.id)


async def select_command(msg: Message, google_sheet: GoogleSheet, config: Config):
    commands = google_sheet.get_commands(config.misc.user_spreadsheet_id)
    await msg.answer('–û–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∫–æ–ª–µ–≥', reply_markup=select_user_commands(commands))
    await msg.answer('–¢–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ–∂ –∑–Ω–∞–π—Ç–∏ –∫–æ–ª–µ–≥—É <b>–∑–∞ –π–æ–≥–æ —ñ–º\'—è–º</b> –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤—à–∏ –ø–æ—à—É–∫',
                     reply_markup=auth_kb('Email'))
    await SendSG.Command.set()


async def select_user(msg: Message, user_db: UserRepo, google_sheet: GoogleSheet, config: Config):
    users = await user_db.get_authorized_user()
    users.remove(await user_db.get_user(msg.from_user.id))
    exist_users = []
    for user in users:
        google_sheet_user = google_sheet.get_user(config.misc.user_spreadsheet_id, user.auth_data)
        if google_sheet_user and google_sheet_user[-1] in msg.text:
            exist_users.append(user)
    await msg.answer('–í–∏–±–µ—Ä–∏ –∑—ñ —Å–ø–∏—Å–∫—É —Ç–æ–≥–æ, –∫–æ–º—É —Ç–∏ —Ö–æ—á–µ—à –Ω–∞–ø—Ä–∞–≤–∏–ª–∏ wellcoin-–∏ üíö',
                     reply_markup=await select_user_kb(exist_users))
    await SendSG.User.set()


async def save_user(msg: Message, state: FSMContext, user_db: UserRepo):
    user = await user_db.get_user_by_name(msg.text)
    if user is None:
        await msg.answer('–£–ø—Å... –ù–µ –∑–Ω–∞–π—à–æ–≤ —Ç–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Å—è –∫–Ω–æ–ø–∫–æ—é "–°–ø–∏—Å–æ–∫ –∫–æ–ª–µ–≥",'
                         ' –∞–±–æ –Ω–∞—Å—Ç–∏—Å–Ω–∏ "–ü–æ—à—É–∫ üîç"')
        return
    await state.update_data(name=msg.text)
    text = (
        '–ù–∞–ø–∏—à–∏ —Å–≤–æ—ó —Ç–µ–ø–ª—ñ —Å–ª–æ–≤–∞ –≤–¥—è—á–Ω–æ—Å—Ç—ñ —Ç—É—Ç. –°–ø—Ä–æ–±—É–π –ø–æ–¥–∞—Ä—É–≤–∞—Ç–∏ —Å–≤–æ—é –≤–¥—è—á–Ω—ñ—Å—Ç—å –≤—ñ–¥ —Å–µ—Ä—Ü—è ‚ù§'
    )
    await msg.answer(text, reply_markup=main_menu_kb)
    await SendSG.Message.set()


async def save_message(msg: Message, state: FSMContext, user_db: UserRepo):
    await state.update_data(message=msg.text)
    user = await user_db.get_user(msg.from_user.id)
    await msg.answer(f'–°–∫—ñ–ª—å–∫–∏ wellcoin-—ñ–≤ —Ç–∏ –±–∞–∂–∞—î—à –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏? –í —Ç–µ–±–µ —î {user.gift_points} üëá')
    await SendSG.Points.set()


async def save_points(msg: Message, user_db: UserRepo, state: FSMContext):
    user = await user_db.get_user(msg.from_user.id)
    if not is_number(msg):
        return await msg.answer('–ù–µ —Å—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ.. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!')
    elif int(msg.text) > user.gift_points:
        return await msg.answer(f'–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ.. –¢–∏ –º–∞—î—à –ª–∏—à–µ {user.gift_points}')
    elif int(msg.text) == 0:
        return await msg.answer('–ó–∞–Ω–∞–¥—Ç–æ –º–∞–ª–æ... –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑!')
    await state.update_data(points=int(msg.text))
    text = (
        f'–ß—É–¥–æ–≤–æ, –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ –ø–µ—Ä–µ–¥–∞—á—É {msg.text} wellcoin-—ñ–≤ ‚úÖ.\n\n'
        f'–í–∫–∞–∂–∏ –∑–∞ —è–∫—É —Å–∞–º–µ —Ü—ñ–Ω–Ω—ñ—Å—Ç—å —Ç–∏ –≤–¥—è—á–Ω–∞/-–Ω–∏–π? '
        f'–¶–µ –º–æ–∂–µ –±—É—Ç–∏ –æ–¥–Ω–∞ –∞–±–æ –¥–µ–∫—ñ–ª—å–∫–∞ —Ü—ñ–Ω–Ω–æ—Å—Ç–µ–π –ö–æ–º–ø–∞–Ω—ñ—ó –∞–±–æ —Ç–≤–æ—è –≤–ª–∞—Å–Ω–∞.\n\n' 
        f'–ù–∞—Ç–∏—Å–Ω–∏ –Ω–∞ —Ü—ñ–Ω–Ω–æ—Å—Ç—ñ —ñ–∑ —Å–ø–∏—Å–∫—É, —è–∫—ñ —Ö–æ—á–µ—à –æ–±—Ä–∞—Ç–∏ –∞ –ø–æ—Ç—ñ–º –Ω–∞—Ç–∏—Å–Ω–∏ "‚úÖ–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ wellcoin-–∏"'
    )
    await msg.answer(text=text, reply_markup=values_kb())
    await state.update_data(value='')
    await SendSG.Value.set()


async def input_values(msg: Message, state: FSMContext):
    data = await state.get_data()
    value = data['value']
    if value == '':
        values = [msg.text]
    else:
        value.append(msg.text)
        values = value
    values_str = ', '.join(values)
    await state.update_data(value=values)
    await msg.answer(f'–û–±—Ä–∞–Ω—ñ —Ü—ñ–Ω–Ω–æ—Å—Ç—ñ: {values_str}', reply_markup=values_kb(next_button=True, added_values=values))


async def input_custom_value(msg: Message):
    await msg.answer('–í–∫–∞–∂–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —â–æ —Ü–µ?')
    await SendSG.CustomValue.set()


async def confirm(msg: Message):
    await msg.answer('–í—Å–µ –≥–æ—Ç–æ–≤–æ, –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ wellcoin-–∏?', reply_markup=confirm_send_kb)
    await SendSG.Confirm.set()


async def send(msg: Message, user_db: UserRepo, point_db: PointRepo,
               state: FSMContext, config: Config, google_sheet: GoogleSheet):
    state_data = await state.get_data()
    name = state_data['name']
    points = int(state_data['points'])
    message = state_data['message']
    value = state_data['value']
    gifter = await user_db.get_user(msg.from_user.id)
    user = await user_db.get_user_by_name(name)
    await point_db.add(
        user_id=user.user_id, gifter_id=gifter.user_id,
        scale=points, value=', '.join(value), comment=message
    )
    remain_points = gifter.gift_points - points
    await user_db.update_user(gifter.user_id, gift_points=remain_points)
    answer_text = (
        f'‚úâ Wellcoin-–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ! '
    )
    if remain_points == 0:
        answer_text += '–í —Ü—å–æ–º—É –º—ñ—Å—è—Ü—ñ —Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ –≤—Å—ñ 100 wellcoin-—ñ–≤'
        await msg.answer(answer_text, reply_markup=main_menu_kb)
    else:
        answer_text = f'–í —Ü—å–æ–º—É –º—ñ—Å—è—Ü—ñ –≤ —Ç–µ–±–µ —î —â–µ {remain_points} wellcoin-—ñ–≤, —è–∫–∏–º–∏ —Ç–∏ –º–æ–∂–µ—à –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è!'
        await msg.answer(answer_text, reply_markup=send_kb)
    user_msg = (
        f'üëâüíö –ü–µ—Ä–µ–∫–∞–∑ {points} wellcoin-—ñ–≤\n\n'
        f'–í—ñ—Ç–∞—î–º–æ! –¢–æ–±—ñ –ø–æ–¥–∞—Ä—É–≤–∞–ª–∏ –ø–æ–¥—è–∫—É –≤—ñ–¥ {gifter.full_name} '
        f'–∑–∞ —Ü—ñ–Ω–Ω—ñ—Å—Ç—å: <b>{value}</b>üíê\n\n<i>{message}</i>'
    )
    await msg.bot.send_message(user.user_id, text=user_msg)
    await state.finish()
    await send_points(msg, state, user_db)
    await state.update_data(gefter_id=msg.from_user.id)
    google_sheet.write_event(
        spreadsheet_id=config.misc.user_spreadsheet_id,
        action='–ü–µ—Ä–µ–∫–∞–∑ –±–∞–ª—ñ–≤',
        sender_name=gifter.full_name,
        getter_name=user.full_name,
        points=points,
        val=value, message=message, sheet_name='Send'
    )


def setup(dp: Dispatcher):
    dp.register_message_handler(send_points, text=Buttons.menu.send_points, state='*')
    dp.register_message_handler(select_command, text=Buttons.send.select_user, state='*')
    dp.register_message_handler(select_user, state=SendSG.Command)
    dp.register_message_handler(save_user, state=SendSG.User)
    dp.register_message_handler(save_message, state=SendSG.Message)
    dp.register_message_handler(save_points, state=SendSG.Points)
    dp.register_message_handler(input_custom_value, state=[SendSG.Value, SendSG.CustomValue],
                                text=Buttons.send.custom_value)
    dp.register_message_handler(confirm, state=[SendSG.Value, SendSG.CustomValue], text=Buttons.send.next_button)
    dp.register_message_handler(input_values, state=[SendSG.Value, SendSG.CustomValue])
    dp.register_message_handler(send, state=SendSG.Confirm)

