import logging
import time

from aiogram import Bot
from apscheduler_di import ContextSchedulerDecorator
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import sessionmaker

from app.config import Config
from app.database.googlesheet.sheets_api import GoogleSheet
from app.database.services.repos import UserRepo, PointRepo
from app.keyboards.reply.menu import to_auth
from app.misc.utils import localize, now

log = logging.getLogger(__name__)


async def set_jobs(scheduler: ContextSchedulerDecorator):
    log.info('Scheduler —Ñ—É–Ω–∫—Ü—ñ—ó –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    scheduler.add_job(reboot_points, trigger='cron', day=1, hour=9, minute=0)
    scheduler.add_job(last_day_point, trigger='cron', day='last', hour=13, minute=0)


async def last_day_point(bot: Bot, session: sessionmaker, config: Config):
    user_db = UserRepo(session())
    text = (
        '–î—Ä—É–∑—ñ, –¥—è–∫—É—î–º–æ –≤—Å—ñ–º –∑–∞ —É—á–∞—Å—Ç—å —Ç–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫ –≤–ª–∞—Å–Ω–æ—ó –Ω–∞–≤–∏—á–∫–∏ –±—É—Ç–∏ –≤–¥—è—á–Ω–æ—é –ª—é–¥–∏–Ω–æ—éüíö\n'
        '–í–∂–µ –∫—ñ–Ω–µ—Ü—å –º—ñ—Å—è—Ü—è, —ñ —Ü–µ –æ–∑–Ω–∞—á–∞—î —â–æ:\n'
        '1 - –∑–∞–≤—Ç—Ä–∞ —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à –Ω–æ–≤—É –ø–æ—Ä—Ü—ñ—é wellcoin-—ñ–≤ üéâ\n'
        '2  - –∞ —Ç—ñ wellcoin-–∏, —è–∫—ñ —î –≤ —Ç–µ–±–µ –∑–∞—Ä–∞–∑ - –∑–Ω–∏–∫–Ω—É—Ç—å üò± –•—É—Ç–∫—ñ—à–µ –ø–æ–¥–∞—Ä—É–π —ó—Ö —Ç–∏–º, —Ö—Ç–æ —Ü–µ –∑–∞—Å–ª—É–≥–æ–≤—É—î!üíö\n'
    )
    for user in await user_db.get_all():
        try:
            await bot.send_message(user.user_id, text=text)
        except:
            for admin_id in config.bot.admin_ids:
                await bot.send_message(admin_id, text=f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.full_name} –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞')


async def reboot_points(bot: Bot, session: sessionmaker, config: Config):
    user_db = UserRepo(session())
    for user in await user_db.get_all():
        text = (
            '<b>–¢–æ–±—ñ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ 100 wellcoin-—ñ–≤ üéâ üíö</b>\n\n'
            '–ü–µ—Ä–µ—Ö–æ–¥—å —É —Ä–æ–∑–¥—ñ–ª "–í—ñ–¥–¥–∞—Ç–∏ –ø–æ–¥—è–∫—É" —Ç–∞ –¥—ñ–ª–∏—Å—å –∑ –∫–æ–ª–µ–≥–∞–º–∏ —á–∞—Å—Ç–∏–Ω–∫–æ—é –¥–æ–±—Ä–æ—Ç–∏ üíö'
        )
        await user_db.update_user(user.user_id, gift_points=100)
        try:
            await bot.send_message(user.user_id, text=text)
        except:
            for admin_id in config.bot.admin_ids:
                await bot.send_message(admin_id, text=f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.full_name} –∑–∞–±–ª–æ–∫—É–≤–∞–≤ –±–æ—Ç–∞')


async def check_auth(session, bot: Bot, config: Config, google_sheet: GoogleSheet):
    session: AsyncSession = session()
    user_db = UserRepo(session)
    users = await user_db.get_all()
    users_sheet = google_sheet.get_auth_data(config.misc.user_spreadsheet_id)
    names = [name for email, name in users_sheet]
    for user in users:
        if user.full_name not in names:
            try:
                await bot.send_message(user.user_id, '–£–ø—Å, —è –≤–∏—è–≤–∏–≤, —â–æ —Ç–∏ –Ω–µ –ø—Ä–æ–π—à–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –¥–æ –∫—ñ–Ω—Ü—è. '
                                                     '–î–∞–≤–∞–π –≤–∏–ø—Ä–∞–≤–∏–º —Ü–µ!',
                                       reply_markup=to_auth)
                for admin in config.bot.admin_ids:
                    await bot.send_message(admin, text=f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.mention} ({user.user_id})'
                                                       f' –Ω–µ –ø—Ä–æ–π—à–æ–≤ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é')
            except:
                pass
    await session.commit()
    await session.close()


async def recreate_events(bot: Bot, session: sessionmaker, config: Config):
    point_db = PointRepo(session)
    user_db = UserRepo(session)
    cell_points = GoogleSheet().read_cells(config.misc.user_spreadsheet_id, 'Events!A2:G')
    cell_points = [[cell_point[i] for i in [0, 3, 4, 5, 6]] for cell_point in cell_points]
    count = 0
    log.info(cell_points[12])
    for point in await point_db.get_all():
        gifter = await user_db.get_user(point.gifter_id)
        user = await user_db.get_user(point.user_id)
        if localize(point.created_at) > now().replace(day=1, month=2):
            data = localize(point.created_at).strftime('%d %B %y')
            point_list = [
                '–ü–µ—Ä–µ–∫–∞–∑ –±–∞–ª—ñ–≤', str(point.scale), data, point.value, point.comment
            ]
            log.info(point_list)
            if point_list not in cell_points:
                count += 1
                GoogleSheet().write_event(
                    spreadsheet_id=config.misc.user_spreadsheet_id,
                    action='–ü–µ—Ä–µ–∫–∞–∑ –±–∞–ª—ñ–≤',
                    sender_name=gifter.full_name,
                    getter_name=user.full_name,
                    points=point.scale,
                    val=point.value, message=point.comment
                )
            time.sleep(1)
    for admin_id in config.bot.admin_ids:
        await bot.send_message(admin_id, f'–í —Ç–∞–±–ª–∏—Ü—é –¥–æ–¥–∞–Ω–æ {count} –ø–µ—Ä–µ–∫–∞–∑—ñ–≤, —â–æ –Ω–µ –∑–±–µ—Ä—ñ–≥–ª–∏—Å—è')

